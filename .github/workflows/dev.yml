name: Dev Docker Image CI

on:
  # push:
  #   branches:
  #     - "main"
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_REGISTRY_IMAGE: kkoles/outyet
  DOCKER_DIGESTS_PATH: /tmp/digests


jobs:
  build:
    environment: dev
    runs-on: ${{ matrix.target.os }}
    strategy:
      matrix:
        target:
          # - { os: "ubuntu-20.04", arch: "amd64" }
          - { os: "ubuntu-latest", arch: "arm64" }

    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Set env variables
        id: vars
        run: echo "tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY_IMAGE }}
          tags: |
            ${{ steps.vars.outputs.tag}}
            latest
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
    
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
  
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_REGISTRY }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/${{ matrix.target.arch }}
          outputs: type=image,name=${{ env.DOCKER_REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ env.DOCKER_DIGESTS_PATH }}
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ env.DOCKER_DIGESTS_PATH }}/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: ${{ env.DOCKER_DIGESTS_PATH }}/*
          if-no-files-found: error
          retention-days: 1

      - name: Clean digests directory
        if: always()
        run: |
          rm -rf ${{ env.DOCKER_DIGESTS_PATH }}/*

  merge-digests:
    runs-on: ubuntu-latest
    needs:
      - build
    environment: dev
    steps:
      
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: ${{ env.DOCKER_DIGESTS_PATH }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set env variables
        id: vars
        run: echo "tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY_IMAGE }}
          tags: |
            ${{ steps.vars.outputs.tag}}
            latest

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_REGISTRY }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Print Docker metadata
        run: |
          echo $DOCKER_METADATA_OUTPUT_JSON
      
      - name: Print Docker tags
        run: |
          echo $DOCKER_METADATA_OUTPUT_TAGS

      - name: Printf
        run: |
          printf '${{ env.DOCKER_REGISTRY_IMAGE }}@sha256:%s ' *

      - name: Echo vars
        id: echo
        run: |
          DOCKER_IMAGE=${{ env.DOCKER_REGISTRY_IMAGE }}
          VERSION=latest
          SHORTREF=${GITHUB_SHA::8}
          # If this is git tag, use the tag name as a docker tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${SHORTREF}"
          # If the VERSION looks like a version number, assume that
          # this is the most recent version of the image and also
          # tag it 'latest'.
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}

      - name: Test vars
        id: test
        run: |
          echo ${{ steps.echo.outputs.tags }}
          echo ${{ steps.echo.outputs.docker_image }}
        
      - name: Create manifest list and push
        working-directory: ${{ env.DOCKER_DIGESTS_PATH }}
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ steps.echo.outputs.docker_image }}@sha256:%s ' *)
